# adapted from:
# - https://github.com/matplotlib/matplotlib/blob/master/.github/workflows/cibuildwheel.yml
# - https://github.com/scikit-image/scikit-image/blob/master/.github/workflows/cibuildwheel.yml

name: Build CI wheels

on:
  push:
    branches:
      - master

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        # os: [ubuntu-latest, windows-latest]
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v2

      # use miniconda on macos to get wheels that are compatible with 10.9+
      # cf. https://stackoverflow.com/a/64253345
      - uses: conda-incubator/setup-miniconda@v2
        if: matrix.os == 'macos-latest'
        name: Install Python (miniconda)
        with:
          python-version: '3.7'

      - run: conda init bash
      - run: source ~/.bash_profile
      # - run: bash
      - run: conda activate test
      - run: python -VV
      - run: python -c "import os; print(os.__file__)"

      # - uses: actions/setup-python@v2
      #   name: Install Python
      #   with:
      #     python-version: '3.7'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      # - name: Build wheels for CPython 3.9 and Mac OS
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     brew install libomp
      #     python -m cibuildwheel --output-dir dist
      #   env:
      #     CIBW_BUILD: "cp39-*"
      #     CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
      #     CIBW_MANYLINUX_I686_IMAGE: manylinux1
      #     # CIBW_BEFORE_BUILD: pip install certifi numpy==1.19.3
      #     CC: /usr/bin/clang
      #     CXX: /usr/bin/clang++
      #     CPPFLAGS: "-Xpreprocessor -fopenmp"
      #     CFLAGS: "-Wno-implicit-function-declaration -I/usr/local/opt/libomp/include"
      #     CXXFLAGS: "-I/usr/local/opt/libomp/include"
      #     LDFLAGS: "-Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"
      #     # CIBW_TEST_REQUIRES: pytest pooch pytest-localserver pytest-faulthandler
      #     # CIBW_TEST_COMMAND: pytest --pyargs skimage

      # - name: Build wheels for CPython 3.9 (Linux and Windows)
      #   if: matrix.os != 'macos-latest'
      #   run: |
      #     python -m cibuildwheel --output-dir dist
      #   env:
      #     CIBW_BUILD: "cp39-*"
      #     CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
      #     CIBW_MANYLINUX_I686_IMAGE: manylinux1
      #     # CIBW_BEFORE_BUILD: pip install certifi numpy==1.19.3
      #     # CIBW_TEST_REQUIRES: pytest pooch pytest-localserver pytest-faulthandler
      #     # CIBW_TEST_COMMAND: pytest --pyargs skimage

      - name: Build wheels for CPython (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gcc@10
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp3?-*"
          CIBW_SKIP: "cp35-* cp39-*"
          CIBW_BEFORE_BUILD: python -m pip install git+https://github.com/uschmidt83/delocate.git@patch-1
          # CIBW_TEST_REQUIRES: pytest tensorflow
          # CIBW_TEST_COMMAND: pytest -v -m "not gpu" {project}
          #
          CC: /usr/local/bin/gcc-10
          CXX: /usr/local/bin/g++-10


      - name: Build wheels for CPython (Linux and Windows)
        if: matrix.os != 'macos-latest'
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          # only build for platforms where tensorflow is available
          CIBW_BUILD: "cp3?-*x86_64 cp3?-*win_amd64"
          CIBW_SKIP: "cp35-* cp39-*"
          # numba is a requirement and only has wheels for manylinux2014
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          # CIBW_TEST_REQUIRES: pytest tensorflow
          # CIBW_TEST_COMMAND: pytest -v -m "not gpu" {project}


      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl